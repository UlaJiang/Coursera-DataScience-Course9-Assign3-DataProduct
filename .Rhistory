meanChild <- mean(galton$child)
lines(rep(meanChild,100),seq(0,150,length=100),col="red",lwd=5)
rep(meanChild,100)
seq(0,150,length=100)
lines(rep(meanChild,100),seq(0,150,length=100))
lines(rep(meanChild,100))
lines(seq(0,150,length=100))
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
freqData <- as.data.frame(table(galton$child, galton$parent))
head(galton)
head(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
head(freqData)
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
xlab = "parent", ylab = "child")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
library(kernlab)
data(spam)
a < - data.frame(c(2,3,4),c(c,r,h))
a <- data.frame(c(2,3,4),c(c,r,h))
a <- as.data.frame(c(2,3,4),c(c,r,h))
a <- as.data.frame(c(2,3,4),c("c","r","h"))
a
a <- as.data.frame(x= c(2,3,4),y = c("c","r","h"))
a
a <- data.frame(x= c(2,3,4),y = c("c","r","h"))
a
dim(a)[1]
library(kernlab)
install.packages("kernlab")
library(kernlab)
library(caret)
install.packages("caret")
library(caret)
data(spam)
rbinom(50,size=1,prob = 0.05)
rbinom(50,size=1,prob = 0.1)
rbinom(100,size=1,prob = 0.1)
a <- rbinom(100,size=1,prob = 0.1)
sum(a)
?rbinom
rbinom(100,size=1,prob = 0.1) == 1
install.packages("kernlab")
library(kernlab)
install.packages("kernlab", type="source")
brew install gfortran
install.packages("kernlab")
install.packages("kernlab")
library(kernlab)
install.packages("caret")
library(caret)
install.packages("kernlab")
library(kernlab)
library(caret)
data(spam)
head(spam)
library(kernlab)
R version
version
r_packages:
- kernlab
library(kernlab)
head(spam)
R -v
R -V
-v
library(kernlab)
library(kernlab)
install.packages("kernlab")
install.packages("kernlab")
library(kernlab)
library(caret)
install.packages("caret")
data(spam)
head(spam)
library(ISLR)
install.packages("ISLR")
library(ISLR)
library(caret)
install.packages("caret")
library(caret)
data(Wage)
head(Wage)
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
install.packages("lme4", dependencies = TRUE)
library(caret)
inTrann <- createDataPartition()y = Wage$wage, p = 0.7, list = FALSE
inTrann <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
?createDataPartition
install.packages("ddalpha")
N
n
library(caret)
inTrann <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
train <- Wage[inTrann,]
testing <- Wage[-inTrann]
testing <- Wage[-inTrann,]
head(train)
dim(train)
dim(testing)
dummies <- dummyVars(wage ~ jobclass, data = training)
dummies <- dummyVars(wage ~ jobclass, data = train)
head(dummies)
head(predict(dummies, newdata = train))
dummies
?dummyVars
nsv <- nearZeroVar(train, saveMetrics = TRUE)
nsv
library(spline)
install.packages("splines")
install.packages("splines")
library(splines)
bsBasis <- bs(train$wage, df = 3)
?bs
bsBasis
lm1 <- lm(wage ~ bsBasis, data = train)
plot(train$age, train$wage, pch = 19, cex = 0.5)
points(train$age, predict(lm1, newdata = train))
plot(train$age, train$wage, pch = 19, cex = 0.5)
points(train$age, predict(lm1, newdata = train),col="red", pch = 19, cex = 0.5)
lm1 <- lm(wage ~ bsBasis, data = train)
lm1
plot(train$age, train$wage, pch = 19, cex = 0.5)
lines(train$age, predict(lm1, newdata = train),col="red", pch = 19, cex = 0.5)
plot(train$age, train$wage, pch = 19, cex = 0.5)
ablines(train$age, predict(lm1, newdata = train),col="red", pch = 19, cex = 0.5)
abline(train$age, predict(lm1, newdata = train),col="red", pch = 19, cex = 0.5)
?abline
?line
line(train$age, predict(lm1, newdata = train),col="red", pch = 19, cex = 0.5)
head(Wage)
Wage <- subset(Wage, select = -c(logwage))
head(Wage)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
inTrain
head(inTrain,10)
nrow(inTrain)
nrow(spam)
preObj <- preProcess(training[,-58],method = c("center","scale"))
training <- spam[inTrain,]
testing <- spam[-inTrain,]
head(training)
preObj <- preProcess(training[,-58],method = c("center","scale"))
head(preObj)
train <- predict(preObj, training[,-58])
head(train)
?preProcess
?dummyVars
head(Wage)
inTrain1 <- createDataPartition(y = Wage$wage, p = 0.7, list = FALSE)
training1 <- Wage[inTrain1,]
testing1 <- Wage[-inTrain1,]
dummies <- dummyVars(wage~job)
dummies <- dummyVars(wage~jobclass, data = training1)
head(dummies,10)
a <- predict(dummies, newdata = training1)
head(a, 10)
nrow(a)
nrow(training1)
head(training1)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(AppliedPredictiveModeling)
head(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(AlzheimerDisease)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
library(hmisc)
library(Hmisc)
?cut2
plot(index, training$CompressiveStrength)
plot(training$CompressiveStrength)
cut2(training$CompressiveStrength,g=3)
table(cut2(training$CompressiveStrength,g=3))
plot(cut2(training$CompressiveStrength,g=3))
library(ggplot2)
cutCompression <- cut2(training$CompressiveStrength,g=3)
g <- ggplot(cutCompression, data = training, fill = cutCompression)
g <- ggplot(training, aes(cutCompression), fill = cutCompression)
g + geom_point()
g + geom_point(y = cutCompression)
?qplot
g <- qplot(index,cutCompression,data = training, geom = c("points"))
g <- qplot(index,cutCompression,data = training, geom = c("boxplot","jitter"))
g
g <- qplot(cutCompression,data = training, geom = c("boxplot","jitter"))
g
g <- qplot(y = cutCompression,data = training, geom = c("boxplot","jitter"))
g
plot(cut2(training$CompressiveStrength,g=3))
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,fill = cut2(training$Age,group=3))
plot(training$CompressiveStrength,fill = cut2(training$Age,g=3))
plot(training$CompressiveStrength,col = cut2(training$Age,g=3))
plot(training$CompressiveStrength,col = cut2(training$Age,g=7))
plot(training$CompressiveStrength,col = cut2(training$Age,g=2))
plot(training$CompressiveStrength,col = cut2(training$Age,g=3))
a <- cut2(training$Age,g=3)
table(a)
a <- cut2(training$Age,g=2)
table(a)
a <- cut2(training$Age,g=4)
table(a)
a <- cut2(training$Age,g=5)
table(a)
a <- cut2(training$Age,g=6)
table(a)
a <- cut2(training$Age,g=7)
table(a)
plot(training$CompressiveStrength,col = cut2(training$Age,g=6))
a <- cut2(training$FlyAsh,g=3)
table(a)
a <- cut2(training$FlyAsh,g=2)
table(a)
a <- cut2(training$FlyAsh,g=4)
table(a)
a <- cut2(training$FlyAsh,g=5)
table(a)
plot(training$CompressiveStrength,col = cut2(training$FlyAsh,g=2))
head(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer)+1)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer)+1)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
a <- c("IL_11","IL_13","IL_16","IL_17E","IL_1alpha","IL_4","IL_5","IL_6","IL_6_Receptor","IL_7","IL_3","IL_8")
b <- training[,c("IL_11","IL_13","IL_16","IL_17E","IL_1alpha","IL_4","IL_5","IL_6","IL_6_Receptor","IL_7","IL_3","IL_8",diagnosis)]
b <- training[,c("IL_11","IL_13","IL_16","IL_17E","IL_1alpha","IL_4","IL_5","IL_6","IL_6_Receptor","IL_7","IL_3","IL_8","diagnosis")]
head(b)
preProcess <- preProcess(b[,-13],method="pca",pcaComp = 2)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
p <- prcomp(training[,grep('^IL',names(training))])
p$rotation
plot(p$sdev/sum(p$sdev))
which(cumsum(p$sdev) / sum(p$sdev) <= .9)
(cumsum(p$sdev) / sum(p$sdev))
preProc <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.9)
preProc
which(cumsum(p$sdev) / sum(p$sdev) <= .8)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain, ]
testing = mixtures[-inTrain, ]
names <- colnames(concrete)
names <- names[-length(names)]
head(training)
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
ggplot(data = training, aes(y = index, x = cutCS)) + geom_boxplot() + geom_jitter(col = "blue") +
theme_bw()
featurePlot(x = training[, names], y = cutCS, plot = "box")
head(adData)
ncol(adData)
ncol(AlzheimerDisease)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
head(inTrain)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)
head(inTrain)
length(inTrain)
?grep
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
preProcess <- preProcess(training[,IL_str],method = "pca", thresh = 0.8)
trainPC <- predict(preProcess,training[,IL_str])
head(trainPC)
modelFit1 <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
head(preProcess)
head(trainPC)
modelFit1 <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
install.packages('e1071', dependencies=TRUE)
modelFit1 <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
head(training)
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
head(trainPC)
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
PCFit <- train(diagnosis~.,data=trainPC,method="glm")
PCFit <- train(trainPC$diagnosis~.,data=trainPC,method="glm")
head(trainPC)
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca", data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca", data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
head(training)
trainPC <- data.frame(trainPC, training$diagnosis)
PCFit <- train(training.diagnosis ~.,data= trainPC, method="glm")
PCTestPredict <- predict(PCFit, testPC)
confusionMatrix( PCTestPredict，testing$diagnosis)
confusionMatrix( PCTestPredict, testing$diagnosis)
PCFit <- train(training.diagnosis ~.,
data = training,
method ="glm",
preProc = "pca",
trControl = trainControl(preProcOptions = list(thresh = 0.8)))
PCFit <- train(diagnosis ~.,
data = training,
method ="glm",
preProc = "pca",
trControl = trainControl(preProcOptions = list(thresh = 0.8)))
modelFit <- train(diagnosis ~ ., method = "glm", preProcess = "pca", data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
NotPCFit <- train(diagnosis ~.,data = training, method="glm")
NotPCTestPredict <- predict(NotPCFit, testing[, -13])
confusionMatrix(testing$diagnosis, NotPCTestPredict)
NotPCFit <- train(diagnosis ~.,data = training, method="glm")
NotPCTestPredict <- predict(NotPCFit, testing[, -1])
confusionMatrix(testing$diagnosis, NotPCTestPredict)
NotPCFit <- train(diagnosis ~.,data = training, method="glm")
NotPCTestPredict <- predict(NotPCFit, testing)
confusionMatrix(testing$diagnosis, NotPCTestPredict)
preProc <- preProcess(training[, -13],method="pca",thresh=.8)
trainPC <- predict(preProc, training)
testPC <- predict(preProc, New_testing)
preProc <- preProcess(training[, -13],method="pca",thresh=.8)
trainPC <- predict(preProc, training)
testPC <- predict(preProc, testing)
PCFit <- train(training.diagnosis ~.,data= trainPC, method="glm")
PCFit <- train(diagnosis ~.,data= trainPC, method="glm")
PCTestPredict <- predict(PCFit, testPC)
confusionMatrix( PCTestPredict, testing$diagnosis)
preProc <- preProcess(training[, -1],method="pca",thresh=.8)
trainPC <- predict(preProc, training)
testPC <- predict(preProc, testing)
PCFit <- train(diagnosis ~.,data= trainPC, method="glm")
PCTestPredict <- predict(PCFit, testPC)
confusionMatrix( PCTestPredict, testing$diagnosis)
preProc <- preProcess(training[, -1],method="pca",thresh=.8)
trainPC <- predict(preProc, training)
testPC <- predict(preProc, testing)
preProc <- preProcess(training[, -1],method="pca",thresh=.8)
trainPC <- predict(preProc, training[,-1])
testPC <- predict(preProc, testing[,-1])
PCFit <- train(diagnosis ~.,data= trainPC, method="glm")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names <- colnames(concrete)
head(names)
names
names <- names[-length(names)]
names
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
cutCS <- cut2(training$CompressiveStrength, g = 4)
table(cutCS)
head(concrete)
head(mixtures)
index <- seq_along(1:nrow(training))
head(index)
length(index)
nrow(training)
ggplot(data = training, aes(y = CompressiveStrength)) + geom_point() +
)
ggplot(data = training, aes(y = CompressiveStrength)) + geom_point()
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,pch=19)
plot(training$CompressiveStrength,pch=19,size=1)
?plot
?theme_bw
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point()
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() + theme_bw()
shiny::runApp('myApp')
setwd("~/myApp")
runApp()
